<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stan Tse&#39;s Blog</title>
  
  <subtitle>离开自己的舒适区，发现不一样的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stantse.github.io/"/>
  <updated>2019-04-04T07:00:27.631Z</updated>
  <id>https://stantse.github.io/</id>
  
  <author>
    <name>Stan Tse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字符串匹配sunday算法</title>
    <link href="https://stantse.github.io/2019/04/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8Dsunday%E7%AE%97%E6%B3%95/"/>
    <id>https://stantse.github.io/2019/04/04/字符串匹配sunday算法/</id>
    <published>2019-04-04T06:50:23.000Z</published>
    <updated>2019-04-04T07:00:27.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python实现字符串匹配sunday算法"><a href="#python实现字符串匹配sunday算法" class="headerlink" title="python实现字符串匹配sunday算法"></a>python实现字符串匹配sunday算法</h2><ol><li><p>匹配移动步骤:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">sunday 算法匹配移动轨迹</span><br><span class="line">s = &apos;BBC ABCDAB ABCDABCDABDE&apos;</span><br><span class="line">p = &apos;ABCDABD&apos;</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line">1:</span><br><span class="line">第0位，s为B，p为A就不匹配</span><br><span class="line">|B|BC ABCDAB ABCDABCDABDE</span><br><span class="line">|A|BCDABD</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2:</span><br><span class="line">找到s的p长度后一位字符，即D字符，然后再从p找到相同字符D所在的位置</span><br><span class="line">从下面看p内第一个D位置为p[3]</span><br><span class="line">BBC ABC|D|AB ABCDABCDABDE</span><br><span class="line">ABCDABD</span><br><span class="line"></span><br><span class="line">p字符串中找D位置</span><br><span class="line">ABC|D|ABD -&gt; p[3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3:</span><br><span class="line">移动公式 i = i + p字符长度 - 3</span><br><span class="line">i = 0 + 7 -3 =4</span><br><span class="line">s[i] = s[4]</span><br><span class="line">移动到s[4]继续匹配</span><br><span class="line">BBC ABCDAB| |ABCDABCDABDE</span><br><span class="line">    ABCDAB|D|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4:</span><br><span class="line">s空与p的D字符，不匹配，找到s的p长度后一位字符，即A字符，然后再从p找到相同字符A所在的位置</span><br><span class="line">从下面看p内第一个D位置为p[0]</span><br><span class="line">BBC ABCDAB |A|BCDABCDABDE</span><br><span class="line">    ABCDABD</span><br><span class="line"></span><br><span class="line">p字符串中找A位置</span><br><span class="line">ABCDABD -&gt; p[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5:</span><br><span class="line">移动公式 i = i + p字符长度 - 3</span><br><span class="line">i = 4 + 7 - 0 =11</span><br><span class="line">移动到s[11]继续匹配</span><br><span class="line">BBC ABCDAB ABCDAB|C|DABDE</span><br><span class="line">       ABCDAB|D|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6:</span><br><span class="line">s的C与p的D字符，不匹配，找到s的p长度后一位字符，即D字符，然后再从p找到相同字符D所在的位置</span><br><span class="line">从下面看p内第一个D位置为p[0]</span><br><span class="line">BBC ABCDAB ABCDABC|D|ABDE</span><br><span class="line">       ABCDABD</span><br><span class="line"></span><br><span class="line">p字符串中找D位置</span><br><span class="line">ABCDABD -&gt; p[3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7:</span><br><span class="line">移动公式 i = i + p字符长度 - 3</span><br><span class="line">i = 11 + 7 - 3 =15</span><br><span class="line">移动到s[15]继续匹配</span><br><span class="line">最后匹配成功</span><br><span class="line">BBC ABCDAB ABCDABCDABDE</span><br><span class="line">          ABCDABD</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>代码实现:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">def find_match_pos(pos):</span><br><span class="line">    i=0</span><br><span class="line">    while i&lt;len(p):</span><br><span class="line">        if p[i] == pos:</span><br><span class="line">            return i</span><br><span class="line">        else:</span><br><span class="line">            i = i+1</span><br><span class="line">    return -1</span><br><span class="line">        </span><br><span class="line">def sunday(s, p):</span><br><span class="line">    i = 0#字符串s开始位置位置</span><br><span class="line">    j = 0#字符串p开始位置</span><br><span class="line">    m = len(p)#匹配字符串初始长度</span><br><span class="line">    while m &lt; len(s):</span><br><span class="line">        if s[i+j] == p[j]:</span><br><span class="line">            j = j+1</span><br><span class="line">            if j == len(p):</span><br><span class="line">                return i</span><br><span class="line">        else:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        i：字符串s与p匹配失败后，跳到s的第i个字符，继续匹配</span><br><span class="line">        如第1次：i = 0（开始位置） + 7(p的长度) - 3（s[7]=D,在p中位置为p[3]=D）</span><br><span class="line">        i = 4</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">        i = i+len(p)-find_match_pos(s[m])</span><br><span class="line">        m = i+len(p)#s字符串中当前i的位置 + p长度，如果m值&gt;=s长度，则字符全部匹配过，匹配结束</span><br><span class="line">        j=0</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">s = &apos;BBC ABCDAB ABCDABCDABDE&apos;</span><br><span class="line">p = &apos;ABCDABD&apos;</span><br><span class="line">print (sunday(s, p))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python实现字符串匹配sunday算法&quot;&gt;&lt;a href=&quot;#python实现字符串匹配sunday算法&quot; class=&quot;headerlink&quot; title=&quot;python实现字符串匹配sunday算法&quot;&gt;&lt;/a&gt;python实现字符串匹配sunday算法&lt;/
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="algorithm" scheme="https://stantse.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python简单邮件收发系统</title>
    <link href="https://stantse.github.io/2019/03/23/python%E7%AE%80%E5%8D%95%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91%E7%B3%BB%E7%BB%9F/"/>
    <id>https://stantse.github.io/2019/03/23/python简单邮件收发系统/</id>
    <published>2019-03-23T13:56:02.000Z</published>
    <updated>2019-03-27T02:57:24.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-poplib-smtplib模块"><a href="#python-poplib-smtplib模块" class="headerlink" title="python poplib smtplib模块"></a>python poplib smtplib模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import poplib</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.parser import Parser</span><br><span class="line">from email.header import decode_header</span><br><span class="line">from email.header import Header</span><br><span class="line">from email.utils import parseaddr, formataddr</span><br><span class="line">import email</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">import smtplib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Mail(object):</span><br><span class="line">def __init__(self):</span><br><span class="line">self.pop_host = &quot;outlook.office365.com&quot;</span><br><span class="line">self.smtp_host = &quot;smtp.office365.com&quot;</span><br><span class="line">self.pop_port = 995</span><br><span class="line">self.smtp_port = 25</span><br><span class="line">self.username = &quot;******@outlook.com&quot;</span><br><span class="line">self.password =  &quot;********&quot;</span><br><span class="line">self.toaddr = &quot;*****@163.com&quot;</span><br><span class="line">self.sub= &quot;hello world!&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property</span><br><span class="line">def pop_login(self):</span><br><span class="line">try:</span><br><span class="line">server = poplib.POP3_SSL(self.pop_host)</span><br><span class="line">server.set_debuglevel(0)</span><br><span class="line">server.user(self.username)</span><br><span class="line">server.pass_(self.password)</span><br><span class="line">print (&quot;login success&quot;)</span><br><span class="line">return server</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">print (&quot;fail&quot;)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">@property</span><br><span class="line">def smtp_login(self):</span><br><span class="line">try:</span><br><span class="line">server = smtplib.SMTP(self.smtp_host, self.smtp_port)</span><br><span class="line">server.starttls()</span><br><span class="line">server.set_debuglevel(1)</span><br><span class="line">server.login(self.username, self.password)</span><br><span class="line">#print (maillink2)</span><br><span class="line">print (&quot;success&quot;)</span><br><span class="line">return server</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">print (&quot;fail&quot;)</span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property</span><br><span class="line">def receive(self):</span><br><span class="line">try:</span><br><span class="line">mail_list = self.pop_login.list()[1]</span><br><span class="line">#print (mail_list)</span><br><span class="line">if len(mail_list) == 0:</span><br><span class="line">return None</span><br><span class="line"></span><br><span class="line">#print (mail_list[-1].decode(&apos;utf-8&apos;))</span><br><span class="line">mail_info = mail_list[-1].decode(&apos;utf-8&apos;).split(&apos; &apos;)</span><br><span class="line">number = mail_info[0]</span><br><span class="line">mail = self.pop_login.retr(number)[1]</span><br><span class="line">#self.maillink.dele(number)</span><br><span class="line"></span><br><span class="line">msg_content = b&quot;\r\n&quot;.join(mail).decode(&quot;utf-8&quot;)</span><br><span class="line">msg = Parser().parsestr(msg_content)</span><br><span class="line">self.pop_login.quit()</span><br><span class="line">self.print_info(msg)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">print (&quot;error&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_info(self, msg, indent =0):</span><br><span class="line">if indent ==0:</span><br><span class="line">for header in [&apos;From&apos;, &apos;To&apos;, &apos;Subject&apos;]:</span><br><span class="line">value = msg.get(header, &apos;&apos;)</span><br><span class="line">#print (&quot;value:&quot;, value)</span><br><span class="line">if value:</span><br><span class="line">if header == &apos;Subject&apos;:</span><br><span class="line">value = self.decode_str(value)</span><br><span class="line">else:</span><br><span class="line">hdr, addr = parseaddr(value)</span><br><span class="line">name = self.decode_str(hdr)</span><br><span class="line">value = u&apos;%s &lt;%s&gt;&apos; % (name, addr) </span><br><span class="line">print (&apos;%s%s: %s&apos; % (&apos;  &apos; * indent, header, value))</span><br><span class="line"></span><br><span class="line">if msg.is_multipart():</span><br><span class="line">parts = msg.get_payload()</span><br><span class="line">for n, part in enumerate(parts):</span><br><span class="line">print (&apos;%spart %s&apos; % (&apos;  &apos; * indent, n))</span><br><span class="line">print (&apos;%s--------------------&apos; % (&apos;  &apos; * indent))</span><br><span class="line">self.print_info(part, indent + 1)</span><br><span class="line">else:</span><br><span class="line">content_type = msg.get_content_type()</span><br><span class="line">if content_type == &apos;text/plain&apos; or content_type == &apos;text/html&apos;:</span><br><span class="line">content = msg.get_payload(decode=True)</span><br><span class="line">charset = self.guess_charset(msg)</span><br><span class="line">if charset:</span><br><span class="line">content = content.decode(charset) </span><br><span class="line">print (&apos;%sText: %s&apos; % (&apos;  &apos; * indent, content + &apos;...&apos;))</span><br><span class="line">else:</span><br><span class="line">print (&apos;%sAttachment: %s&apos; % (&apos;  &apos; * indent, content_type))    </span><br><span class="line"></span><br><span class="line">def decode_str(self, s):</span><br><span class="line">value, charset = decode_header(s)[0]</span><br><span class="line">#print (value, charset)</span><br><span class="line">if charset:</span><br><span class="line">value = value.decode(charset)</span><br><span class="line"></span><br><span class="line">#print (value)</span><br><span class="line">return value</span><br><span class="line"></span><br><span class="line">def guess_charset(self, msg):</span><br><span class="line">charset = msg.get_charset()</span><br><span class="line">if charset is None:</span><br><span class="line">content_type = msg.get(&apos;Content-Type&apos;, &apos;&apos;).lower()</span><br><span class="line">pos = content_type.find(&apos;charset=&apos;)</span><br><span class="line">if pos&gt;0:</span><br><span class="line">charset = content_type[pos + 8:].strip()</span><br><span class="line">return charset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def _format_addr(self, s):</span><br><span class="line">name, addr = parseaddr(s)</span><br><span class="line">return formataddr((Header(name, &apos;utf-8&apos;).encode(), addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@property</span><br><span class="line">def send(self):</span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[&apos;From&apos;] = self._format_addr(self.username)</span><br><span class="line">msg[&apos;To&apos;] = self._format_addr(self.toaddr)</span><br><span class="line">msg[&apos;Subject&apos;] = Header(self.sub, &apos;utf-8&apos;).encode()</span><br><span class="line">txt = MIMEText(&apos;发送测试！！！&apos;, _subtype=&apos;plain&apos;, _charset=&apos;utf8&apos;)</span><br><span class="line">msg.attach(txt)</span><br><span class="line">h = MIMEText(&apos;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello，这是一个Python的SMTP程序发送来的邮件&lt;/h1&gt;&apos; +\</span><br><span class="line">&apos;&lt;p&gt;send by Stan Tse&lt;/a&gt;...&lt;/p&gt;&apos; +\</span><br><span class="line">&apos;&lt;/body&gt;&lt;/html&gt;&apos;, _subtype=&apos;html&apos;, _charset=&apos;utf8&apos;)</span><br><span class="line">msg.attach(h)</span><br><span class="line">img = MIMEText(open(&apos;1.jpg&apos;, &apos;rb&apos;).read(), &apos;base64&apos;, &apos;utf-8&apos;)</span><br><span class="line">img[&apos;Content-Type&apos;] = &apos;application/octet-stream&apos;</span><br><span class="line">img[&apos;Content-Disposition&apos;] = &apos;attachment; filename=&quot;Picture.png&quot;&apos;</span><br><span class="line">msg.attach(img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.smtp_login.sendmail(self.username, self.toaddr, msg.as_string())</span><br><span class="line">self.smtp_login.quit()</span><br><span class="line"></span><br><span class="line">@property</span><br><span class="line">def main(self):</span><br><span class="line">self.receive()</span><br><span class="line">self.send()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">mail = Mail()</span><br><span class="line">mail.main</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-poplib-smtplib模块&quot;&gt;&lt;a href=&quot;#python-poplib-smtplib模块&quot; class=&quot;headerlink&quot; title=&quot;python poplib smtplib模块&quot;&gt;&lt;/a&gt;python poplib smt
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="poplib" scheme="https://stantse.github.io/tags/poplib/"/>
    
      <category term="smtplib" scheme="https://stantse.github.io/tags/smtplib/"/>
    
  </entry>
  
  <entry>
    <title>python基于websocket-client简单socket.io客户端</title>
    <link href="https://stantse.github.io/2019/03/23/python%E5%9F%BA%E4%BA%8Ewebsocket-client%E7%AE%80%E5%8D%95socket-io%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://stantse.github.io/2019/03/23/python基于websocket-client简单socket-io客户端/</id>
    <published>2019-03-23T08:50:54.000Z</published>
    <updated>2019-03-23T08:55:14.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-websocket-client模块创建socket-io连接"><a href="#python-websocket-client模块创建socket-io连接" class="headerlink" title="python websocket-client模块创建socket.io连接"></a>python websocket-client模块创建socket.io连接</h2><ol><li>send ‘2’保持心跳</li><li>send ‘42[“message”,{}]’开头为request body</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">from threading import Timer, Event, Thread</span><br><span class="line"></span><br><span class="line">import websocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HeartbeatThread(Thread):</span><br><span class="line">    &quot;&quot;&quot;心跳&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, event, ws):</span><br><span class="line">        super(HeartbeatThread, self).__init__()</span><br><span class="line">        self.event = event</span><br><span class="line">        self.ws = ws</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while 1:</span><br><span class="line">            # 发送ping包</span><br><span class="line">            self.ws.send(&apos;2&apos;)</span><br><span class="line">            self.event.wait(timeout=2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_message(ws, message):</span><br><span class="line">    &quot;&quot;&quot;接收信息&quot;&quot;&quot;</span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_error(ws, error):</span><br><span class="line">    print(error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_close(ws):</span><br><span class="line">    print(&quot;### closed ###&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_open(ws):</span><br><span class="line">    &quot;&quot;&quot;请求连接&quot;&quot;&quot;</span><br><span class="line">    ws.send(&quot;2probe&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_emit(ws):</span><br><span class="line">    # 创建心跳线程</span><br><span class="line">    event = Event()</span><br><span class="line">    heartbeat = HeartbeatThread(event, ws)</span><br><span class="line">    heartbeat.start()</span><br><span class="line"></span><br><span class="line">    while 1:</span><br><span class="line">        # 发送信息</span><br><span class="line">        # 4: engine.io message</span><br><span class="line">        # 2: socket.io event</span><br><span class="line">        content = &apos;42[&quot;message&quot;, &#123;&quot;_url&quot;:&quot;/chain/get_account&quot;,&quot;_method&quot;:&quot;POST&quot;,&quot;_headers&quot;:&#123;&quot;content-type&quot;:&quot;application/json&quot;&#125;,&quot;account&quot;:&quot;eosio.stake&quot;,&quot;lang&quot;:&quot;zh-CN&quot;&#125;]&apos;</span><br><span class="line">        ws.send(content)</span><br><span class="line">        time.sleep(6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    websocket.enableTrace(True)</span><br><span class="line">    # url 格式</span><br><span class="line">    ws = websocket.WebSocketApp(</span><br><span class="line">        &quot;wss://XXXXX.io/socket.io/?EIO=3&amp;transport=websocket&quot;,</span><br><span class="line">        on_message=on_message,</span><br><span class="line">        on_error=on_error,</span><br><span class="line">        on_close=on_close</span><br><span class="line">    )</span><br><span class="line">    ws.on_open = on_open</span><br><span class="line"></span><br><span class="line">    t = Timer(3, on_emit, args=(ws,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    ws.run_forever()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-websocket-client模块创建socket-io连接&quot;&gt;&lt;a href=&quot;#python-websocket-client模块创建socket-io连接&quot; class=&quot;headerlink&quot; title=&quot;python websocket
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="websocket" scheme="https://stantse.github.io/tags/websocket/"/>
    
      <category term="socket.io" scheme="https://stantse.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>多线程生产及消费模式</title>
    <link href="https://stantse.github.io/2019/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%94%9F%E4%BA%A7%E5%8F%8A%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F/"/>
    <id>https://stantse.github.io/2019/03/21/多线程生产及消费模式/</id>
    <published>2019-03-21T07:18:45.000Z</published>
    <updated>2019-03-21T07:53:26.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用生产者与消费者模式"><a href="#为什么要使用生产者与消费者模式" class="headerlink" title="为什么要使用生产者与消费者模式"></a>为什么要使用生产者与消费者模式</h2><ol><li>解耦</li><li>并发</li><li>支持忙闲不均</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from queue import Queue</span><br><span class="line">import random,threading,time</span><br><span class="line"></span><br><span class="line">#生产者类</span><br><span class="line">class Producer(threading.Thread):</span><br><span class="line">    def __init__(self, name,threadnum, queue):</span><br><span class="line">        super(Producer, self).__init__(name = name)</span><br><span class="line">        self.data=queue</span><br><span class="line">        self.threadnum = threadnum</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        for i in range(5):</span><br><span class="line">            print(&quot;%s is producing %d to the queue!&quot; % (self.getName(), i+5*self.threadnum))</span><br><span class="line">            self.data.put(i+5*self.threadnum)</span><br><span class="line">            time.sleep(random.randrange(10)/5)</span><br><span class="line">        print(&quot;%s finished!&quot; % self.getName())</span><br><span class="line"></span><br><span class="line">#消费者类</span><br><span class="line">class Consumer(threading.Thread):</span><br><span class="line">    def __init__(self,name, threadnum, queue):</span><br><span class="line">        super(Consumer, self).__init__(name = name)</span><br><span class="line">        self.data=queue</span><br><span class="line">        self.threadnum = threadnum</span><br><span class="line">    def run(self):</span><br><span class="line">        for i in range(5):</span><br><span class="line">            val = self.data.get()</span><br><span class="line">            print(&quot;%s is consuming. %d in the queue is consumed!&quot; % (self.getName(),val))</span><br><span class="line">            time.sleep(random.randrange(10))</span><br><span class="line">        print(&quot;%s finished!&quot; % self.getName())</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    queue = Queue()#队列</span><br><span class="line">    threads = []</span><br><span class="line">    threads = []</span><br><span class="line">    threadnum = 2</span><br><span class="line">    for i in range(threadnum):</span><br><span class="line">        threads.append(Producer(&apos;Producer&apos;,i, queue))   </span><br><span class="line">        threads.append(Consumer(&apos;Consumer&apos;,i, queue))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for t in threads:</span><br><span class="line">        t.start() </span><br><span class="line"></span><br><span class="line">    for t in threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print (&apos;All threads finished!&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要使用生产者与消费者模式&quot;&gt;&lt;a href=&quot;#为什么要使用生产者与消费者模式&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用生产者与消费者模式&quot;&gt;&lt;/a&gt;为什么要使用生产者与消费者模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;解耦&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="threading" scheme="https://stantse.github.io/tags/threading/"/>
    
      <category term="Queue" scheme="https://stantse.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>lucky draw</title>
    <link href="https://stantse.github.io/2019/03/20/lucky-draw/"/>
    <id>https://stantse.github.io/2019/03/20/lucky-draw/</id>
    <published>2019-03-20T09:30:19.000Z</published>
    <updated>2019-03-20T09:33:45.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-simple-lucky-draw-programe"><a href="#A-simple-lucky-draw-programe" class="headerlink" title="A simple lucky draw programe"></a>A simple lucky draw programe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import random</span><br><span class="line">#总抽奖人数</span><br><span class="line">employee = 100</span><br><span class="line">#获奖奖项记录</span><br><span class="line">prizes_records = &#123;&quot;1st&quot;:[], &quot;2nd&quot;:[], &quot;3rd&quot;:[], &quot;other&quot;:[]&#125;</span><br><span class="line">#n为获奖人数，prize为奖项    </span><br><span class="line">def prize(n,prize):</span><br><span class="line">    global employee</span><br><span class="line">    rest_roll_time = n -len(prizes_records[prize])</span><br><span class="line">    prize_record_list = []</span><br><span class="line">    while rest_roll_time:</span><br><span class="line">        for _, value in prizes_records.items():</span><br><span class="line">            prize_record_list += value </span><br><span class="line">        random_employee = random.randint(0, employee-1) </span><br><span class="line">        if random_employee not in prize_record_list:</span><br><span class="line">            prizes_records[prize].append(random_employee)</span><br><span class="line">            rest_roll_time-=1</span><br><span class="line">            continue </span><br><span class="line">            </span><br><span class="line">    return prizes_records       </span><br><span class="line">    </span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    print (prize(1, &apos;1st&apos;))</span><br><span class="line">    print (prize(2, &apos;2nd&apos;))</span><br><span class="line">    print (prize(10, &apos;3rd&apos;))</span><br><span class="line">    print (prize(10, &apos;other&apos;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-simple-lucky-draw-programe&quot;&gt;&lt;a href=&quot;#A-simple-lucky-draw-programe&quot; class=&quot;headerlink&quot; title=&quot;A simple lucky draw programe&quot;&gt;&lt;/a&gt;A 
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="programe" scheme="https://stantse.github.io/tags/programe/"/>
    
  </entry>
  
  <entry>
    <title>python手写sqrt方法</title>
    <link href="https://stantse.github.io/2019/03/14/python%E6%89%8B%E5%86%99sqrt%E6%96%B9%E6%B3%95/"/>
    <id>https://stantse.github.io/2019/03/14/python手写sqrt方法/</id>
    <published>2019-03-14T03:35:24.000Z</published>
    <updated>2019-03-14T03:37:24.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手写sqrt方法"><a href="#手写sqrt方法" class="headerlink" title="手写sqrt方法"></a>手写sqrt方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">#二分法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mySqrt(num):</span><br><span class="line">    low = 0</span><br><span class="line">    high = num</span><br><span class="line">    while 1:</span><br><span class="line">        </span><br><span class="line">        a = (high+ low)/2</span><br><span class="line">        test = a*a</span><br><span class="line">        if abs(test-num)&lt; 0.0000001:</span><br><span class="line">            break</span><br><span class="line">        </span><br><span class="line">        elif test &gt; num:</span><br><span class="line">            high = a</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            low = a</span><br><span class="line"></span><br><span class="line">    return a        </span><br><span class="line">   </span><br><span class="line">print (mySqrt(20))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;手写sqrt方法&quot;&gt;&lt;a href=&quot;#手写sqrt方法&quot; class=&quot;headerlink&quot; title=&quot;手写sqrt方法&quot;&gt;&lt;/a&gt;手写sqrt方法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="algorithm" scheme="https://stantse.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>tornado.ioloop 与 threading</title>
    <link href="https://stantse.github.io/2019/03/14/tornado-ioloop-%E4%B8%8E-threading/"/>
    <id>https://stantse.github.io/2019/03/14/tornado-ioloop-与-threading/</id>
    <published>2019-03-14T02:49:01.000Z</published>
    <updated>2019-03-14T03:10:03.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tornado-ioloop-threading结合实现异步操作"><a href="#tornado-ioloop-threading结合实现异步操作" class="headerlink" title="tornado.ioloop + threading结合实现异步操作"></a>tornado.ioloop + threading结合实现异步操作</h2><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><p>py_ioloop2.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line">import tornado</span><br><span class="line">import tornado.web</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import time</span><br><span class="line">import platform</span><br><span class="line">from py_ioloop3 import threadfunc</span><br><span class="line">from py_ioloop4 import LoopSample</span><br><span class="line">from kafka import KafkaConsumer</span><br><span class="line">consummer = KafkaConsumer(&apos;mykafka&apos;, bootstrap_servers =[&apos;192.168.99.100:9092&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ThreadService(threading.Thread):</span><br><span class="line">def __init__(self):</span><br><span class="line">super(ThreadService, self).__init__()</span><br><span class="line"></span><br><span class="line">def run(self):</span><br><span class="line">#本地kafka连接获取整数(从1开始，持续获取)</span><br><span class="line">for msg in consummer:</span><br><span class="line">#为偶数时执行回调</span><br><span class="line">if int(msg.key)%2 == 0:</span><br><span class="line">loop.add_callback(threadfunc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">print (&quot;start&quot;)</span><br><span class="line">loop = tornado.ioloop.IOLoop.current()</span><br><span class="line">ls = LoopSample()</span><br><span class="line">ts = ThreadService()</span><br><span class="line">ts.start()#多线程</span><br><span class="line">loop.call_later(1, ls.update)#delay 1秒回调updat</span><br><span class="line">loop.start()</span><br></pre></td></tr></table></figure><p>py_ioloop3.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def callback_service():</span><br><span class="line">print (&quot;call back:&quot; +  str(time.time()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def threadfunc():</span><br><span class="line">time.sleep(1)</span><br><span class="line">t = threading.Thread(target = callback_service)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p>py_ioloop4.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import threading</span><br><span class="line">import tornado</span><br><span class="line">import tornado.web</span><br><span class="line">import tornado.ioloop</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">loop = tornado.ioloop.IOLoop.current()</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">class LoopSample(object):</span><br><span class="line"></span><br><span class="line">def update(self):</span><br><span class="line"></span><br><span class="line">global i</span><br><span class="line">time.sleep(1)</span><br><span class="line">print (&quot;update&quot; + str(time.time()))</span><br><span class="line">i = i + 1</span><br><span class="line">loop.call_later(1, self.update) #delay 1秒回调循环执行update方法</span><br><span class="line">print (i)</span><br><span class="line">#当i为500停止主线</span><br><span class="line">if i == 500:</span><br><span class="line">loop.stop()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tornado-ioloop-threading结合实现异步操作&quot;&gt;&lt;a href=&quot;#tornado-ioloop-threading结合实现异步操作&quot; class=&quot;headerlink&quot; title=&quot;tornado.ioloop + threading结合
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="tornado" scheme="https://stantse.github.io/tags/tornado/"/>
    
      <category term="threading" scheme="https://stantse.github.io/tags/threading/"/>
    
  </entry>
  
  <entry>
    <title>pytest+allure+jenkins持续集成</title>
    <link href="https://stantse.github.io/2019/02/01/pytest-allure-jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://stantse.github.io/2019/02/01/pytest-allure-jenkins持续集成/</id>
    <published>2019-02-01T12:54:19.000Z</published>
    <updated>2019-02-01T13:05:24.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pytest-allure-jenkins持续集成"><a href="#pytest-allure-jenkins持续集成" class="headerlink" title="pytest+allure+jenkins持续集成"></a>pytest+allure+jenkins持续集成</h2><ol><li>jenkins任务选择pipeline流水线</li><li>代码管理使用gitlab</li><li>pipeline script脚本做部署</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   </span><br><span class="line">   stage (&apos;checkout git&apos;) &#123;</span><br><span class="line">       git credentialsId: &apos;a4d3e27b-173b-4c67-8ae8-ec0b430ccbc0&apos;, url: &apos;https://XXXXXXX/qa/task_XXXX.git&apos;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   stage (&apos; run pytest&apos;) &#123;</span><br><span class="line">       </span><br><span class="line">      sh &apos;python -m pytest -q -s -v ./xxxx.py --reruns=5 --ff --cache-clear  --alluredir ./allure-results&apos;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   stage (&apos;report&apos;) &#123;</span><br><span class="line">       </span><br><span class="line">       allure includeProperties: false, jdk: &apos;&apos;, results: [[path: &apos;allure-results&apos;]]</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pytest-allure-jenkins持续集成&quot;&gt;&lt;a href=&quot;#pytest-allure-jenkins持续集成&quot; class=&quot;headerlink&quot; title=&quot;pytest+allure+jenkins持续集成&quot;&gt;&lt;/a&gt;pytest+allu
      
    
    </summary>
    
      <category term="jenkins" scheme="https://stantse.github.io/categories/jenkins/"/>
    
    
      <category term="pipeline" scheme="https://stantse.github.io/tags/pipeline/"/>
    
      <category term="allure" scheme="https://stantse.github.io/tags/allure/"/>
    
  </entry>
  
  <entry>
    <title>locust geventhttpclient版本</title>
    <link href="https://stantse.github.io/2019/01/30/locust-geventhttpclient%E7%89%88%E6%9C%AC/"/>
    <id>https://stantse.github.io/2019/01/30/locust-geventhttpclient版本/</id>
    <published>2019-01-30T12:27:20.000Z</published>
    <updated>2019-01-30T12:42:39.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FastHttpLocust"><a href="#FastHttpLocust" class="headerlink" title="FastHttpLocust"></a>FastHttpLocust</h2><ul><li><p>默认安装的Locust，HttpLocust因为受限于requests，其性能稍显不足，geventhttpclient版本对性能提升比较明显。</p></li><li><p>安装locust</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -e git://github.com/locustio/locust.git@geventhttpclient<span class="comment">#egg=locustio</span></span><br></pre></td></tr></table></figure></li><li><p>locust 脚本</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from locust import HttpLocust, TaskSet, task</span><br><span class="line">from locust.contrib.fasthttp import FastHttpLocust</span><br><span class="line">from locust.contrib.fasthttp import FastHttpSession</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserTask(TaskSet):</span><br><span class="line">    @task</span><br><span class="line">    def tc_index(self):</span><br><span class="line">        fs = FastHttpSession(&quot;https://www.baidu.com&quot;)</span><br><span class="line">        with fs.get(&apos;/&apos;, catch_response = True) as response:</span><br><span class="line">            if response.status_code == 200:</span><br><span class="line">                response.success()</span><br><span class="line">                                </span><br><span class="line">            else:</span><br><span class="line">                response.failure(&apos;failure&apos;)</span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">class UserOne(FastHttpLocust):</span><br><span class="line">    task_set = UserTask</span><br><span class="line">    weight = 1</span><br><span class="line">    min_wait = 1000</span><br><span class="line">    max_wait = 3000</span><br><span class="line">    stop_timeout = 5</span><br><span class="line">    host = &quot;https://www.baidu.com&quot;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">class UserTwo(FastHttpLocust):</span><br><span class="line">    task_set = UserTask</span><br><span class="line">    weight = 2</span><br><span class="line">    host = &quot;https://www.baidu.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FastHttpLocust&quot;&gt;&lt;a href=&quot;#FastHttpLocust&quot; class=&quot;headerlink&quot; title=&quot;FastHttpLocust&quot;&gt;&lt;/a&gt;FastHttpLocust&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认安装的Locust，H
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="locust" scheme="https://stantse.github.io/tags/locust/"/>
    
  </entry>
  
  <entry>
    <title>求list里最大及第二大数</title>
    <link href="https://stantse.github.io/2019/01/29/%E6%B1%82list%E9%87%8C%E6%9C%80%E5%A4%A7%E5%8F%8A%E7%AC%AC%E4%BA%8C%E5%A4%A7%E6%95%B0/"/>
    <id>https://stantse.github.io/2019/01/29/求list里最大及第二大数/</id>
    <published>2019-01-29T12:48:50.000Z</published>
    <updated>2019-01-29T12:57:42.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给定数值列表，求出列表内最大、第二大数"><a href="#给定数值列表，求出列表内最大、第二大数" class="headerlink" title="给定数值列表，求出列表内最大、第二大数"></a>给定数值列表，求出列表内最大、第二大数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def find_second_large_num(num_list):</span><br><span class="line">    </span><br><span class="line">    &apos;&apos;&apos;&apos;&apos;</span><br><span class="line">    找出数组中第2大的数字</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    #直接排序,输出倒数第二个数即可</span><br><span class="line">    tmp_list=sorted(num_list)</span><br><span class="line">    print &apos;Second_large_num is:&apos;, tmp_list[-2]</span><br><span class="line">    print &apos;largest_num is&apos;, tmp_list[-1]</span><br><span class="line">    #设置两个标志位一个存储最大数一个存储次大数</span><br><span class="line">    #two存储次大值，one存储最大值，遍历一次数组即可，先判断是否大于one，若大于将one的</span><br><span class="line">    #值给two，将num_list[i]的值给one；否则比较是否大于two，若大于直接将num_list[i]的</span><br><span class="line">    #值给two；否则pass</span><br><span class="line">    one=num_list[0]</span><br><span class="line">    two=num_list[1]</span><br><span class="line">    for i in range(1,len(num_list)):</span><br><span class="line">        if num_list[i]&gt; one:</span><br><span class="line">            two=one</span><br><span class="line">            one = num_list[i]</span><br><span class="line">        elif num_list[i]&gt;two:</span><br><span class="line">            two=num_list[i]</span><br><span class="line">        else:</span><br><span class="line">            pass</span><br><span class="line">    print &apos;Second_large_num is:&apos;, two</span><br><span class="line">    print &apos;largest_num is&apos;, one</span><br></pre></td></tr></table></figure><ul><li>一般情况以上的方法可以返回最大、第二大数，但列表中如果重复出现多个最大、第二大数就有问题</li><li>求列表最大、第二大值,输入list需先做去重处理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;给定数值列表，求出列表内最大、第二大数&quot;&gt;&lt;a href=&quot;#给定数值列表，求出列表内最大、第二大数&quot; class=&quot;headerlink&quot; title=&quot;给定数值列表，求出列表内最大、第二大数&quot;&gt;&lt;/a&gt;给定数值列表，求出列表内最大、第二大数&lt;/h2&gt;&lt;figu
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="list" scheme="https://stantse.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>求json最大深度</title>
    <link href="https://stantse.github.io/2019/01/29/%E6%B1%82json%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>https://stantse.github.io/2019/01/29/求json最大深度/</id>
    <published>2019-01-29T12:14:24.000Z</published>
    <updated>2019-01-29T12:44:36.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json原始数据"><a href="#json原始数据" class="headerlink" title="json原始数据"></a>json原始数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">json_data = &#123;</span><br><span class="line">    &quot;id&quot;: &apos;90&apos;,</span><br><span class="line">    &quot;text&quot;: &apos;China&apos;,</span><br><span class="line">    &quot;children&quot;: [&#123;</span><br><span class="line">        &quot;id&quot;: &apos;80&apos;,</span><br><span class="line">        &quot;text&quot;: &apos;North China&apos;,</span><br><span class="line">        &quot;children&quot;: [&#123;</span><br><span class="line">            &quot;id&quot;: &apos;1156110000&apos;,</span><br><span class="line">            &quot;text&quot;: &apos;Beijing&apos;,</span><br><span class="line">             &quot;children&quot;: [</span><br><span class="line">                 &#123; &quot;id&quot;: &apos;742&apos;, &quot;text&quot;: &apos;Changping&apos;,</span><br><span class="line">                 &quot;children&quot; :[</span><br><span class="line">                 &#123;&quot;id&quot;:&quot;6666666&quot;,&quot;text&quot;:&quot;llllll&quot;&#125;,</span><br><span class="line">                 &#123;&quot;id&quot;:&quot;7777777&quot;,&quot;text&quot;:&quot;xxxxxx&quot;&#125;,</span><br><span class="line">                 ]</span><br><span class="line">                 &#125;,</span><br><span class="line"></span><br><span class="line">                 &#123; &quot;id&quot;: &apos;743&apos;, &quot;text&quot;: &apos;chaoyang&apos; &#125;,</span><br><span class="line">                 &#123; &quot;id&quot;: &apos;759&apos;, &quot;text&quot;: &apos;yanqing&apos; &#125;</span><br><span class="line">             ]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            &quot;id&quot;: &apos;1156120000&apos;,</span><br><span class="line">            &quot;text&quot;: &apos;Tianjin&apos;,</span><br><span class="line">             &quot;children&quot;: [</span><br><span class="line">                 &#123; &quot;id&quot;: &apos;760&apos;, &quot;text&quot;: &apos;Baodi&apos;,</span><br><span class="line">                 &quot;children&quot;: [</span><br><span class="line">                        &#123;&quot;id&quot;:&quot;8888&quot;,&quot;text&quot;:&quot;jjjjjjj&quot;&#125;,</span><br><span class="line">                        &#123;&quot;id&quot;:&quot;9999&quot;,&quot;text&quot;:&quot;kkkkkkk&quot;,</span><br><span class="line">                        &quot;children&quot;: [</span><br><span class="line">                            &#123;&quot;id&quot;:&quot;111111111111&quot;,&quot;text&quot;:&quot;ppp&quot;&#125;,</span><br><span class="line">                             ]</span><br><span class="line">                        &#125;,</span><br><span class="line"></span><br><span class="line">                        ]</span><br><span class="line">                 &#125;,</span><br><span class="line">                 &#123; &quot;id&quot;: &apos;761&apos;, &quot;text&quot;: &apos;Beichen&apos; &#125;,</span><br><span class="line">                 &#123; &quot;id&quot;: &apos;900&apos;, &quot;text&quot;: &apos;New Binghai&apos; &#125;</span><br><span class="line">             ]</span><br><span class="line">        &#125;]</span><br><span class="line">        &#125;, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        &quot;id&quot;: &apos;81&apos;,</span><br><span class="line">        &quot;text&quot;: &apos;North East China&apos;,</span><br><span class="line">        &quot;children&quot;: [&#123;</span><br><span class="line">            &quot;id&quot;: &apos;1156230000&apos;,</span><br><span class="line">            &quot;text&quot;: &apos;Heilongjiang&apos;,</span><br><span class="line">            &quot;children&quot;: [</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156230600&apos;, &quot;text&quot;: &apos;Daqing&apos; &#125;,</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156230700&apos;, &quot;text&quot;: &apos;Yichun&apos; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            &quot;id&quot;: &apos;1156220000&apos;,</span><br><span class="line">            &quot;text&quot;: &apos;Jilin&apos;,</span><br><span class="line">            &quot;children&quot;: [</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156220800&apos;, &quot;text&quot;: &apos;Baicheng&apos; &#125;,</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156220100&apos;, &quot;text&quot;: &apos;CHangchun&apos; ,</span><br><span class="line">                &quot;children&quot;: [&#123;&quot;id&quot;:&quot;123&quot;,&quot;text&quot;:&quot;aaa123&quot;&#125;,</span><br><span class="line">                             &#123;&quot;id&quot;:&quot;234&quot;, &quot;text&quot;:&quot;aaa234&quot;, &quot;children&quot;:[&#123;&quot;id&quot;:&quot;345&quot;, &quot;text&quot;:&quot;aaa345&quot;,&quot;children&quot;:[&#123;&quot;id&quot;:&quot;678&quot;, &quot;text&quot;:&quot;aaa678&quot;&#125;,&#123;&quot;id&quot;:&quot;789&quot;, &quot;text&quot;:&quot;aaa789&quot;&#125;]&#125;,&#123;&quot;id&quot;:&quot;456&quot;,&quot;text&quot;:&quot;aaa456&quot;&#125;]&#125;]&#125;</span><br><span class="line">                ]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            &quot;id&quot;: &apos;1156210000&apos;,</span><br><span class="line">            &quot;text&quot;: &apos;Lianning&apos;,</span><br><span class="line">            &quot;children&quot;: [</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156210300&apos;, &quot;text&quot;: &apos;Anshang&apos; ,</span><br><span class="line">                &quot;children&quot;:[&#123;&quot;id&quot;:&quot;133888&quot;, &quot;text&quot;:&quot;aa13388&quot;&#125;,&#123;&quot;id&quot;:&quot;34343&quot;,&quot;text&quot;:&quot;738584&quot;&#125;]&#125;,</span><br><span class="line">                &#123; &quot;id&quot;: &apos;1156210800&apos;, &quot;text&quot;: &apos;Yinkou&apos; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="求json-data最大深度"><a href="#求json-data最大深度" class="headerlink" title="求json_data最大深度"></a>求json_data最大深度</h2><ul><li>解题思路是用递归的方法遍历一遍，然后计算其中的children个数</li><li>返回的res_depth列表对应统计children个数会有重复，结构要去重处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def parser_depth(json_data, depth =0):</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    res_depth = []</span><br><span class="line"></span><br><span class="line">    for node in json_data[&apos;children&apos;]:</span><br><span class="line">        if node.has_key(&apos;children&apos;) == True:</span><br><span class="line">            res_depth.extend(parser_depth(node, depth + 1))</span><br><span class="line">        </span><br><span class="line">        else:</span><br><span class="line">            res_depth.append(depth)</span><br><span class="line">            </span><br><span class="line">    return  res_depth  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node_depth_list = parser_depth(json_data)</span><br><span class="line"></span><br><span class="line">print list(set(node_depth_list))[-1]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;json原始数据&quot;&gt;&lt;a href=&quot;#json原始数据&quot; class=&quot;headerlink&quot; title=&quot;json原始数据&quot;&gt;&lt;/a&gt;json原始数据&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="json" scheme="https://stantse.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>pytest --alluredir 错误提示option already added解决</title>
    <link href="https://stantse.github.io/2019/01/25/pytest-allure-%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BAoption-already-added%E8%A7%A3%E5%86%B3/"/>
    <id>https://stantse.github.io/2019/01/25/pytest-allure-错误提示option-already-added解决/</id>
    <published>2019-01-25T01:33:38.000Z</published>
    <updated>2019-01-25T02:05:28.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pytest执行–alluredir"><a href="#pytest执行–alluredir" class="headerlink" title="pytest执行–alluredir"></a>pytest执行–alluredir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pytest <span class="built_in">test</span> --alluredir ./allure-report</span><br></pre></td></tr></table></figure><h3 id="error-log"><a href="#error-log" class="headerlink" title="error log:"></a>error log:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> raise ValueError(&quot;option names %s already added&quot; % conflict)</span><br><span class="line">ValueError: option names set([&apos;--alluredir&apos;]) already added</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li><p>卸载allure-pytest-adaptor</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall allure-pytest-adaptor</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>安装allure-pytest</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install allure-pytest</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pytest执行–alluredir&quot;&gt;&lt;a href=&quot;#pytest执行–alluredir&quot; class=&quot;headerlink&quot; title=&quot;pytest执行–alluredir&quot;&gt;&lt;/a&gt;pytest执行–alluredir&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="pytest" scheme="https://stantse.github.io/tags/pytest/"/>
    
  </entry>
  
  <entry>
    <title>locust对websocket进行压力测试</title>
    <link href="https://stantse.github.io/2019/01/24/locust%E5%AF%B9websocket%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>https://stantse.github.io/2019/01/24/locust对websocket进行压力测试/</id>
    <published>2019-01-24T11:46:24.000Z</published>
    <updated>2019-01-24T13:32:23.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WSTaskset-手撸一个WS测试任务类WSTaskset"><a href="#WSTaskset-手撸一个WS测试任务类WSTaskset" class="headerlink" title="WSTaskset:手撸一个WS测试任务类WSTaskset"></a>WSTaskset:手撸一个WS测试任务类WSTaskset</h2><ol><li><strong>on_start:</strong> 先建立websocket链接,再写个_recieve私有方法作数据接收,gevent.spwan(_recieve)方法异步接收服务端recv消息。</li><li><strong>sent:</strong> sent向websocket服务端发送信息。</li><li><strong>on_quit:</strong> 关闭websocket链接</li></ol><h2 id="WSLocust：继承loucst类"><a href="#WSLocust：继承loucst类" class="headerlink" title="WSLocust：继承loucst类"></a>WSLocust：继承loucst类</h2><ol><li><strong>task_set:</strong> WSTaskset赋值给task_set让locust去执行。</li><li><strong>queue:</strong> 这边对发送请求的用户做了参数化，并put到队列里,user_token_queue = queue.Queue(), user_token_queue.put_nowait(token)。</li></ol><h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本:"></a>完整脚本:</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"> # -*- coding:utf-8 -*-</span><br><span class="line">from __future__ import absolute_import</span><br><span class="line">from __future__ import unicode_literals</span><br><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">import uuid</span><br><span class="line">import time</span><br><span class="line">import gevent</span><br><span class="line">import queue</span><br><span class="line">import websocket</span><br><span class="line">import six</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from locust import HttpLocust, TaskSet, task, Locust</span><br><span class="line">from locust.events import request_success</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WSTaskSet(TaskSet):</span><br><span class="line"></span><br><span class="line">    def on_start(self):</span><br><span class="line">        ws = websocket.WebSocket()</span><br><span class="line">        ws.connect(&apos;wss://xxx.com/ws&apos;)</span><br><span class="line">        self.ws =ws</span><br><span class="line"></span><br><span class="line">        def _receive():</span><br><span class="line">            while True:</span><br><span class="line">                res = ws.recv()</span><br><span class="line">                data = json.loads(res)</span><br><span class="line">                print (data)</span><br><span class="line">                end_at = time.time()</span><br><span class="line">                #response_time = 1000</span><br><span class="line">                request_success.fire(</span><br><span class="line">                    request_type=&apos;WebSocket Recv&apos;,</span><br><span class="line">                    name=&apos;test/ws/recv&apos;,</span><br><span class="line">                    response_time=int((time.time() - end_at) * 1000),</span><br><span class="line">                    response_length=len(res),</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        gevent.spawn(_receive)</span><br><span class="line"></span><br><span class="line">    def on_quit(self):</span><br><span class="line">        self.ws.close()</span><br><span class="line"></span><br><span class="line">    @task</span><br><span class="line">    def sent(self):</span><br><span class="line"></span><br><span class="line">        token = self.locust.user_token_queue.get()</span><br><span class="line"></span><br><span class="line">        start_at = time.time()</span><br><span class="line">        body = json.dumps(send_msg)</span><br><span class="line">        print (&quot;send......&quot;, token)</span><br><span class="line">        self.ws.send(body)</span><br><span class="line">        request_success.fire(</span><br><span class="line">        request_type=&apos;WebSocket Sent&apos;,name=&apos;test/ws/sent&apos;,</span><br><span class="line">        response_time=int((time.time() - start_at) * 1000), </span><br><span class="line">        response_length=len(body)</span><br><span class="line">        )</span><br><span class="line">        self.locust.user_token_queue.put_nowait(token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WSLocust(Locust):</span><br><span class="line">    task_set = WSTaskSet</span><br><span class="line">    min_wait = 1000</span><br><span class="line">    max_wait = 1000</span><br><span class="line">    #host = &quot;http://127.0.0.1:5000&quot;</span><br><span class="line">    token_list = np.arange(10001, 10101)</span><br><span class="line">    #token_list = [&apos;10001&apos;, &apos;10002&apos;]</span><br><span class="line">    user_token_queue = queue.Queue()</span><br><span class="line">    for index in range(len(token_list)):</span><br><span class="line">        token = str(token_list[index])</span><br><span class="line">        user_token_queue.put_nowait(token)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WSTaskset-手撸一个WS测试任务类WSTaskset&quot;&gt;&lt;a href=&quot;#WSTaskset-手撸一个WS测试任务类WSTaskset&quot; class=&quot;headerlink&quot; title=&quot;WSTaskset:手撸一个WS测试任务类WSTaskset&quot;&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://stantse.github.io/categories/python/"/>
    
    
      <category term="locust" scheme="https://stantse.github.io/tags/locust/"/>
    
  </entry>
  
</feed>
